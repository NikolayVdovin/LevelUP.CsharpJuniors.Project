@page "/Product/{Id:guid}"
@using PhoneStore.UI.Models
@using PhoneStore.UI.Services

@inject IProductsServiceProxy Proxy;

@if (_storeItemInfo is not null)
{
    <Card>
        <CardImage Style="max-height:400; max-width:300" Source="@($"/img/gallery/{Id.ToString().ToUpper()}.jpg")" Alt="Placeholder image"> </CardImage>
        <CardBody>
            <CardText>
                <Div>
                    Наименование: <TextEdit @bind-Text = "_storeItemInfo.Name"/>
                </Div> 
                <Div>
                    Описание: <TextEdit @bind-Text = "_storeItemInfo.Description"/>
                </Div>
                <Div>
                    Цена: <TextEdit @bind-Text = "_storeItemInfo.Price"/>
                </Div>               
            </CardText>
            <Button Color="Color.Primary" Margin="Margin.Is2.FromTop" Clicked="@SaveProduct">
                Сохранить <Icon Name="IconName.Save"/>
            </Button><Button Color="Color.Primary" Margin="Margin.Is2.FromTop" Clicked="@DeleteProduct">
                Удалить <Icon Name="IconName.Save"/>
            </Button>
        </CardBody>
    </Card>
}

else
{
    <h3>Загружаем карточку смартфона...</h3>
}

@code {
    private StoreItemInfo? _storeItemInfo;
    private ProductItem? product;

    [Parameter]
    public Guid Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        product = await Proxy.GetProductById(Id);
        _storeItemInfo = new StoreItemInfo("", "", "", "", "");
        _storeItemInfo.Id = product.Id.ToString();
        _storeItemInfo.Name = product.Name;
        _storeItemInfo.CategoryId = product.CategoryId.ToString();
        _storeItemInfo.Price = product.Price.ToString();
        _storeItemInfo.Description = product.Description;
    }

    async Task SaveProduct()
    {
        product = new ProductItem(new Guid(_storeItemInfo.Id), _storeItemInfo.Name, new Guid(_storeItemInfo.CategoryId), Convert.ToDecimal(_storeItemInfo.Price), _storeItemInfo.Description);
        await Proxy.UpdateProduct(product);
        
    }

    async Task DeleteProduct()
    {
        await Proxy.DeleteProduct(Id);
    }
}
